openapi: 3.0.0
info:
  title: 'Shopping List Backend Service'
  description: 'This service provides endpoints for all related interactions'
  version: 1.0.0
  contact:
    name: 'Marvelous Ik'
    email: 'ikmarv@gmail.com'

x-organization: shoppingList
x-service-id: backend

servers:
  - description: Staging
    url: http://127.0.0.1:8000/

tags:
  - name: items
    description: 'User items'


paths:
  /api/items:
    get:
      summary: "Retrieve a list of all todo shopping list items"
      operationId: retriveTodoList
      x-visibility: public
      tags:
        - 'items'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AccessDenied'
        default:
          $ref: '#/components/responses/ServerError'
    post:
      summary: "Create a new todo shopping list item"
      operationId: createShoppingList
      x-visibility: public
      tags:
        - 'items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShoppingListRequest'
      responses:
        '201':
          description: Shopping List Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/ServerError'
  
  /api/items/{id}:
    get:
      summary: Retrieve a single todo shopping list item by ID
      operationId: retrieveSingleShoppingList
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - 'items'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AccessDenied'
        default:
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a todo shopping list item
      operationId: updateTodoShoppingList
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - 'items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateShoppingListRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AccessDenied'
        default:
          $ref: '#/components/responses/ServerError'
    
    delete:
      summary: Delete a todo shopping list item
      operationId: deleteTodoShoppingList
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - 'items'
      responses:
        '200':
          description: Shopping List deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AccessDenied'
        default:
          $ref: '#/components/responses/ServerError'
      
  /api/items/{id}/complete:
    put:
      summary: Mark todo list as completed
      operationId: markTodoListAsCompleted
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - 'items'
      responses:
        '200':
          description: Shopping List updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AccessDenied'
        default:
          $ref: '#/components/responses/ServerError'

     



components:
  schemas:
    # REQUEST OBJECT DEFINITIONS
    Items:
      type: object
      required:
          - id
          - name
          - description
          - photo
          - amount
      properties:
          id:
            type: string
            description: unique identifier
          name:
            type: string
            description: name of the item
          description:
            type: string
          photo:
            type: string
            description: picture of the item
          status:
            type: string
            enum:
              - PENDING
              - COMPLETED
          amount:
            type: number
          created_at:
            type: string
          updated_at:
            type: string
  

    ItemList:
      type: array
      items:
        $ref: '#/components/schemas/Items'

    CreateShoppingListRequest:
      type: object
      additionalProperties: false
      required:
        - name
        - description
        - photo
        - amount
      properties:
        name:
          type: string
        description:
          type: string
        photo:
          type: string
        amount:
          type: number

    updateShoppingListRequest:
      type: object
      additionalProperties: false
      required:
        - name
        - description
        - photo
        - amount
      properties:
        name:
          type: string
        description:
          type: string
        photo:
          type: string
        amount:
          type: number


    SuccessMessage:
      type: object
      properties:
        success:
          type: boolean
          description: Returns a true to state that action was successful
          example: true
        message:
          type: string
          description: Message for successful operation
          example: Successful

    ErrorMessageDto:
      $ref: './common.yaml#/components/schemas/ErrorMessageDto'

    StatusDto:
      $ref: './common.yaml#/components/schemas/StatusDto'

  responses:
    StatusResponse:
      description: Request status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusDto'
          example:
            success: true
            message: 'Action completed successfully'

    InvalidRequest:
      description: Request could not be validated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'BAD_REQUEST'
            message: 'Request could not be validated.'

    Unauthorized:
      description: Client is not authorized to make request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageDto'
          example:
            code: 'UNAUTHORIZED'
            message: 'Either client security header is missing or it is not valid.'
    AccessDenied:
      description: Expected permission is not available.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'ACCESS_DENIED'
            message: 'Expected permission or scope is not present.'

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageDto"
          example:
            code: 'INTERNAL_ERROR'
            message: 'An internal server error occurred.'
      
        

    